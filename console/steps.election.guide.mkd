
# Guía de Despliegue e Interacción con los Contratos `Tenant` y `Election` 

## En la consola

Primero, asegúrate de tener los contratos `Tenant` y `Election` desplegados en la red local de Hardhat.

### 1. Desplegar `Election.sol`
```javascript
async function deployElection() {
    const [admin] = await ethers.getSigners();
    const adminAddress = await admin.getAddress();

    console.log(`Admin Address: ${adminAddress}`);

    const Election = await ethers.getContractFactory("Election");
    const election = await Election.deploy(adminAddress, "Election 1", "First Election");
    await election.waitForDeployment();

    console.log(`Election deployed at: ${await election.getAddress()}`);
    return election;
}

deployElection().catch((error) => {
    console.error(error);
    process.exit(1);
});
```

### 2. Desplegar `Tenant.sol`
```javascript
async function deployTenant() {
    const Tenant = await ethers.getContractFactory("Tenant");
    const tenant = await Tenant.deploy();
    await tenant.waitForDeployment();

    console.log(`Tenant deployed at: ${await tenant.getAddress()}`);
    return tenant;
}

deployTenant().catch((error) => {
    console.error(error);
    process.exit(1);
});
```

---

## Ejemplos de Uso e Interacción con los Contratos

### 1. Crear una Elección desde el Contrato Tenant
```javascript
async function createElection(tenant, subdomain, name, description) {
    await tenant.getFunction("createElection")(subdomain, name, description);
    console.log(`Election created for tenant: ${subdomain}`);
}
```

### 2. Votar por un Candidato
```javascript
async function voteForCandidate(election, candidateId) {
    await election.getFunction("vote")(candidateId);
    console.log(`Votaste por el candidato con ID: ${candidateId}`);
}
```

### 3. Obtener Todos los Candidatos de una Elección
```javascript
async function getAllCandidates(election) {
    const candidates = await election.getFunction("getAllCandidates")();
    console.log("Candidatos:", candidates.map((c) => c.toString()));
}
```

### 4. Obtener el Ganador de la Elección
```javascript
async function getWinner(election) {
    const winner = await election.getFunction("getWinner")();
    console.log("Candidato ganador:", winner);
}
```

### 5. Verificar la Integridad de un Voto con Checkpoints
```javascript
async function verifyVoteIntegrity(election, candidateId) {
    const isValid = await election.getFunction("verifyCheckpoint")(candidateId);
    if (isValid) {
        console.log("El voto está íntegro.");
    } else {
        console.log("Discrepancia encontrada en los votos.");
    }
}
```

---

## Ejemplo Completo de Flujo de Interacción

1. **Compila los contratos:**
   ```shell
   pnpm run compile
   ```

2. **Corre en una terminal la "red local":**
   ```shell
   pnpm run local-node
   ```

3. **Corre en una terminal el "modo consola", para probar los contratos:**
   ```shell
   pnpm run console
   ```

4. **Crear una elección:**
   ```javascript
   const tenant = await deployTenant();
   await createElection(tenant, "tenant1.example.com", "Elección General", "Descripción de la elección");
   ```

5. **Votar por un candidato:**
   ```javascript
   const election = await deployElection();
   await voteForCandidate(election, 0);
   ```

6. **Obtener todos los candidatos:**
   ```javascript
   await getAllCandidates(election);
   ```

7. **Verificar la integridad de los votos:**
   ```javascript
   await verifyVoteIntegrity(election, 0);
   ```

---

## Conclusión

Este archivo proporciona una guía clara y estructurada para desplegar e interactuar con los contratos `Tenant` y `Election`. Siguiendo estos pasos, podrás gestionar múltiples elecciones por tenant y realizar todas las operaciones necesarias.

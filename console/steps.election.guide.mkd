
# Guía de Prueba de Elecciones Reales

## Abre una terminal

1. Compila los contratos:
   ```shell
   pnpm run compile
   ```

2. Inicia el nodo local de Blockchain:
   ```shell
   pnpm run local-node
   ```

3. Abre la terminal de HardHat:
   ```shell
   pnpm run console
   ```

## Despliegue de Contratos

### 1. Desplegar `Election.sol`
```javascript
async function deployElection() {
    const [admin] = await ethers.getSigners();
    const adminAddress = await admin.getAddress();
    
    console.log(`Admin Address: ${adminAddress}`);

    const Election = await ethers.getContractFactory("Election");
    const election = await Election.deploy(adminAddress, "Elección Nacional", "Elección Presidencial");
    await election.waitForDeployment();

    console.log(`Election deployed at: ${await election.getAddress()}`);
    return election;
}
```

### 2. Desplegar `Tenant.sol`
```javascript
async function deployTenant() {
    const Tenant = await ethers.getContractFactory("Tenant");
    const tenant = await Tenant.deploy();
    await tenant.waitForDeployment();

    console.log(`Tenant deployed at: ${await tenant.getAddress()}`);
    return tenant;
}
```

---

## Operaciones con los Contratos

### 1. Crear una Elección
```javascript
async function createElection(tenant, subdomain, name, description) {
    await tenant.createElection(subdomain, name, description);
    console.log(`Election created for tenant: ${subdomain}`);
}
```

### 2. Agregar un Candidato
```javascript
async function addCandidate(election, name, description, imgHash, email) {
    await election.addCandidate(name, description, imgHash, email);
    console.log(`Candidato agregado: ${name}`);
}
```

### 3. Listar Candidatos
```javascript
async function listCandidates(election) {
    const candidates = await election.getAllCandidates();
    console.log("Candidatos:", candidates.map(c => c.toString()));
}
```

### 4. Votar por un Candidato
```javascript
async function voteForCandidate(election, candidateId) {
    await election.vote(candidateId);
    console.log(`Votaste por el candidato con ID: ${candidateId}`);
}
```

### 5. Finalizar la Elección
```javascript
async function endElection(election) {
    await election.endElection();
    console.log("Elección finalizada.");
}
```

### 6. Obtener el Ganador
```javascript
async function getWinner(election) {
    const winner = await election.getWinner();
    console.log("Candidato ganador:", winner);
}
```

### 7. Verificar Integridad de Votos con Checkpoints
```javascript
async function verifyVoteIntegrity(election, candidateId) {
    const isValid = await election.verifyCheckpoint(candidateId);
    if (isValid) {
        console.log("El voto está íntegro.");
    } else {
        console.log("Discrepancia encontrada en los votos.");
    }
}
```

---

## Datos de Prueba

### Datos para Crear una Elección
```javascript
const tenant = await deployTenant();
await createElection(tenant, "tenant1.example.com", "Elección General", "Descripción de la elección");
```

### Datos para Agregar Candidatos
```javascript
const election = await deployElection();
await addCandidate(election, "Alice", "Blockchain Developer", "imgHash1", "alice@example.com");
await addCandidate(election, "Bob", "Data Scientist", "imgHash2", "bob@example.com");
```

### Datos para Listar Candidatos
```javascript
await listCandidates(election);
```

### Datos para Votar por un Candidato
```javascript
await voteForCandidate(election, 0); // Votar por Alice
await voteForCandidate(election, 1); // Votar por Bob
```

### Finalizar Elección
```javascript
await endElection(election);
```

### Obtener el Ganador
```javascript
await getWinner(election);
```

### Verificar Integridad de Votos
```javascript
await verifyVoteIntegrity(election, 0); // Verificar voto de Alice
await verifyVoteIntegrity(election, 1); // Verificar voto de Bob
```

---

## Conclusión

Este archivo proporciona una guía paso a paso para probar el sistema de elecciones utilizando los contratos `Tenant` y `Election`. Asegúrate de seguir cada paso en orden para garantizar que todas las funciones se ejecuten correctamente.
